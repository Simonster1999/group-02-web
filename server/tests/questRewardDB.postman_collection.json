{
	"info": {
		"_postman_id": "bda186c3-8d55-41ad-9b46-45e4f55bde11",
		"name": "questRewardDB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List All Parents",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c02409fc-9c10-49cd-876f-4fcb3d3b3c04",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.parents).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0e9fa26-fa93-49aa-b02a-c995bfc0290f",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"parent_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"parent_acc\", \"password\": \"123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Parents",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c5616f2-db15-457b-afc6-408014593cdd",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username for [0] is Simonsterxx\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.parents[0].username).to.eql('parent_acc');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return parent with given ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2db7ed17-c5f4-418e-9f48-7696d2ccddd5",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct parent\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update entire parent with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28aaa61a-9e83-46ec-9cf8-24137590f91c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent info is updated\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc2');\r",
							"    pm.expect(jsonData.password).to.eql(\"143\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"parent_acc2\", \"password\": \"143\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update password for given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe89c646-f25b-453c-9a93-2133df8d9f21",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent password is updated\", function () {\r",
							"    pm.expect(jsonData.password).to.eql(\"333\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"password\": \"333\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all children",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1d67b606-f08e-483d-bf63-8b06c6d2ce65",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.children).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create child",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5cf8763f-c196-4493-826c-61acdb3679b8",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"child_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Child is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"child_acc\", \"password\": \"123\", \"parent\": \"{{parent_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all children",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ff57a4c-e87e-45ca-af9c-e71ba3c130d4",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username for [0] is Simonsterxx\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.children[0].username).to.eql('child_acc');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43449ec3-f3a3-455f-bf92-d37872d48ad8",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct child\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update entire child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62573381-bf61-48c5-b421-67efc8ab46f5",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Child info is updated\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc2');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"child_acc2\", \"balance\": 100}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partially update child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f01dc90-ab3f-4571-9c16-ba894e0a809e",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Child balance is updated\", function () {\r",
							"    pm.expect(jsonData.balance).to.eql(9999);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"balance\" : 9999}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7972293d-b5ff-408c-884d-adeffcbf0424",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non extisting child",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a48333d-e2df-4332-afdf-f50a4a1bd94c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"response should have valid JSON data\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Child not found\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd75501a-bc4b-4210-8d9e-a67faf5a742c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non existing parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f50d735f-a6fb-4f7c-8ecc-bcc6e99648ac",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"response should have valid JSON data\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Parent not found\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Quests (empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7f811cf-1a2a-486e-b4d7-02a177e8b87a",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.quests).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Quest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f13e1b77-a7ff-4262-a603-fc3386bdbcb9",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"quest_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Quest is created\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql('test quest');\r",
							"    pm.expect(jsonData.money_bounty).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"quest_name\": \"test quest\", \"money_bounty\": \"5\", \"date\": \"2020-09-15\", \"parent\": \"{{parent_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return quest with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e06fd5a-7b68-4057-b24a-df97df053ba6",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Returns correct quest\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql(\"test quest\");\r",
							"    pm.expect(jsonData.money_bounty).to.eql(5);\r",
							"    //check for date\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/quests/{{quest_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests",
						"{{quest_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Quests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c50690f9-8a62-44c8-ace3-9fdf2baebc56",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct quests\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.quests[0].quest_name).to.eql('test quest');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return all quests for given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed470eea-8190-4699-b04d-37619c5cab95",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct quests\", function () {\r",
							"    pm.expect(jsonData[0].quest_name).to.eql('test quest');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return a given quest for a given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f3bde99-f37f-4181-a89b-59fbc0e8b162",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct quest\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql('test quest');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests/{{quest_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests",
						"{{quest_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the quest with the given ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "601abfb0-b9d3-417b-ad85-ad6d8eec41f6",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/quests/{{quest_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests",
						"{{quest_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Quest Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e1dd0c8-6976-47f4-81b6-d8dea7fad9e5",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"quest_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Quest is created\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql('delete me');\r",
							"    pm.expect(jsonData.money_bounty).to.eql(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"quest_name\": \"delete me\", \"money_bounty\": \"404\", \"date\": \"2020-09-19\", \"parent\": \"{{parent_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change entire quest entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47c6a1f9-2bd2-4491-8dfe-14524c1a1a41",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Quest has been replaced\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql('The new, refined test quest');\r",
							"    pm.expect(jsonData.quest_desc).to.eql('A much more lucrative quest than its predecessor');\r",
							"    pm.expect(jsonData.is_completed).to.eql(false);\r",
							"    pm.expect(jsonData.money_bounty).to.eql(13.37);\r",
							"    //Research date datatype\r",
							"    //pm.expect(jsonData.date).to.eql(\"2020-09-16\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quest_name\": \"The new, refined test quest\", \r\n    \"money_bounty\": \"13.37\",\r\n    \"is_completed\": \"false\", \r\n    \"quest_desc\": \"A much more lucrative quest than its predecessor\", \r\n    \"date\": \"2020-09-16\",\r\n    \"quest\": \"{{quest_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/quests/{{quest_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests",
						"{{quest_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Quest Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39c95b13-1397-4a71-878d-c5b592f16c6c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"quest_id2\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Quest is created\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql('delete me');\r",
							"    pm.expect(jsonData.money_bounty).to.eql(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"quest_name\": \"delete me\", \"money_bounty\": \"404\", \"date\": \"2020-09-19\", \"parent\": \"{{parent_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change specified quest attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f90b833a-b103-4c03-8cbd-82d94bb7b4c0",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Attributes have been updated\", function () {\r",
							"    pm.expect(jsonData.quest_name).to.eql(\"test quest 2\");\r",
							"    pm.expect(jsonData.money_bounty).to.eql(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n    \"quest_name\": \"test quest 2\",\r\n    \"money_bounty\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/quests/{{quest_id2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests",
						"{{quest_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return all quests sorted by money_bounty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0514781-d730-4c81-9815-6dda9113165f",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct quests\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var lastElement = jsonData.quests.length - 1;\r",
							"    pm.expect(jsonData.quests[0].money_bounty).to.lessThan(jsonData.quests[jsonData.quests.length - 1].money_bounty);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/quests?sort_bounty=asc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"quests"
					],
					"query": [
						{
							"key": "sort_bounty",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the quest with the given ID for the given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f10fd405-1c41-4a7c-8b0d-cdac2576e704",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests/{{quest_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests",
						"{{quest_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the quest with the given ID for the given parent Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4b11cd4-75db-481f-a3c3-d3fe6a580756",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/quests/{{quest_id2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"quests",
						"{{quest_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Rewards (empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad4d1976-ec05-44ad-b64e-78db86d6136a",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    pm.expect(jsonData.rewards).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Parent For Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f05e3137-be56-4c3d-901c-4b5a59394001",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"parent_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct parent is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc1');\r",
							"    pm.expect(jsonData.password).to.eql(\"1234\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"parent_acc1\", \r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ff776e5-2ee0-449a-a05c-8ea6d2c318c2",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"reward_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is created\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('1 piece of candy');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(15);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"Candy\", \r\n    \"reward_desc\": \"1 piece of candy\", \r\n    \"price\": \"15\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get reward with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4da5b0e2-4b03-4f16-b6ab-4738dcb30343",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct reward\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('1 piece of candy');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(15);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2nd Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43eb8c68-c47a-4d1f-827c-f1e9938fb7d2",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"reward_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is created\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd');\r",
							"    pm.expect(jsonData.reward_desc).to.be.undefined;\r",
							"    pm.expect(jsonData.is_bought).to.eql(true);\r",
							"    pm.expect(jsonData.price).to.eql(25);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd\", \r\n    \"is_bought\": \"true\", \r\n    \"price\": \"25\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all rewards with given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9d40773-c052-4a60-a0c2-cbf2d4ee85d8",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct rewards\", function () {\r",
							"    pm.expect(jsonData[0].reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData[1].reward_name).to.eql('2nd');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b7ec3b1-a9ec-4edd-98bd-959f6fcd8495",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is replaced\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd v2');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('Now replaced');\r",
							"    pm.expect(jsonData.is_bought).to.eql(true);\r",
							"    pm.expect(jsonData.price).to.eql(30);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v2\", \r\n    \"reward_desc\": \"Now replaced\",\r\n    \"is_bought\": \"true\", \r\n    \"price\": \"30\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38679bb5-489c-4b5d-a944-fac14ab125cc",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is updated\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd v3');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('Now replaced');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(10);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63dfa9f5-9480-4dc2-85fd-aad456d5a452",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa5a6502-7e2e-4add-bd83-9d2f34a22132",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65529a10-937c-47f8-bd5b-9a7b8e895114",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1272a143-3275-4c65-816f-776da5a53f02",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v2\", \r\n    \"reward_desc\": \"Now replaced\",\r\n    \"is_bought\": \"true\", \r\n    \"price\": \"30\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28defb97-4dd7-49f3-b2c1-2131f2766d9c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}