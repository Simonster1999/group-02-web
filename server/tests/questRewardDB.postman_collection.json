{
	"info": {
		"_postman_id": "77e4f841-86e9-462b-ac72-9f776c86172f",
		"name": "questRewardDB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List All Parents",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ffae9fc3-62b3-46fe-b82b-818d5f074c95",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.parents).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46b8e745-22e3-4011-9a13-ed922a253ef6",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"parent_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"parent_acc\", \"password\": \"123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Parents",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51f13234-70bd-4251-9836-cd00a4ba4f90",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username for [0] is Simonsterxx\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.parents[0].username).to.eql('parent_acc');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return parent with given ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "296c08cc-e562-45d8-8240-aa2b0c97999b",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct parent\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update entire parent with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2784b6e7-6932-436a-a142-e90fa13d3e2d",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent info is updated\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc2');\r",
							"    pm.expect(jsonData.password).to.eql(\"143\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"parent_acc2\", \"password\": \"143\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update password for given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cfc8af17-82e1-4b93-a33c-00f9f8af87be",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Parent password is updated\", function () {\r",
							"    pm.expect(jsonData.password).to.eql(\"333\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"password\": \"333\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all children",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "70727afd-1f4e-4805-bf29-4414f0022399",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.children).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create child",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f08526be-6a1c-47e8-a5fd-c5d03c017585",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"child_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Child is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"child_acc\", \"password\": \"123\", \"parent\": \"{{parent_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all children",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6ee4d01-5834-443c-ba55-6bb52f3e9c97",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username for [0] is Simonsterxx\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.children[0].username).to.eql('child_acc');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd28cae1-2d7c-4a08-a0cb-6821b8675ca9",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct child\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc');\r",
							"    pm.expect(jsonData.password).to.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update entire child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1222d55f-ea70-4baa-bb56-de27be642dc3",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Child info is updated\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('child_acc2');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"child_acc2\", \"balance\": 100}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partially update child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d662b60c-d705-49cd-9a1e-be11411f3a47",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Child balance is updated\", function () {\r",
							"    pm.expect(jsonData.balance).to.eql(9999);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"balance\" : 9999}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete child with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3d897f8-af4e-45a6-abed-f6d78d699a10",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non extisting child",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "77ae71dd-747f-4e65-b060-6a9ffb0072cf",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"response should have valid JSON data\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Child not found\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/children/{{child_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"children",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c794ddc7-9d5e-452e-b63e-c27e5738aa35",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non existing parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41855d59-a021-46af-a278-bed90eb4a10c",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"response should have valid JSON data\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Parent not found\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Rewards (empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef86491a-5d30-410e-bb92-a8af03495642",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List is empty\", function () {\r",
							"    pm.expect(jsonData.rewards).to.eql([]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Parent For Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3e857a4-2beb-4f5a-8855-3afe5525f63e",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"parent_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct parent is created\", function () {\r",
							"    pm.expect(jsonData.username).to.eql('parent_acc1');\r",
							"    pm.expect(jsonData.password).to.eql(\"1234\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"parent_acc1\", \r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/parents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15161a9b-5eea-4747-b8a6-438d2e215017",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"reward_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is created\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('1 piece of candy');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(15);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"Candy\", \r\n    \"reward_desc\": \"1 piece of candy\", \r\n    \"price\": \"15\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get reward with given id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "169e8335-508e-451e-9ac5-d11a64b333d2",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct reward\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('1 piece of candy');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(15);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2nd Reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a4bba96-1ceb-4203-9d22-ce083728c23e",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"reward_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is created\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd');\r",
							"    pm.expect(jsonData.reward_desc).to.be.undefined;\r",
							"    pm.expect(jsonData.is_bought).to.eql(true);\r",
							"    pm.expect(jsonData.price).to.eql(25);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd\", \r\n    \"is_bought\": \"true\", \r\n    \"price\": \"25\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all rewards with given parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "82981da3-0b7b-4316-90f1-9cb330d16129",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns correct rewards\", function () {\r",
							"    pm.expect(jsonData[0].reward_name).to.eql('Candy');\r",
							"    pm.expect(jsonData[1].reward_name).to.eql('2nd');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/parents/{{parent_id}}/rewards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"parents",
						"{{parent_id}}",
						"rewards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab1dfdca-0c5b-4c15-af3a-ab28f1b1baaf",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is replaced\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd v2');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('Now replaced');\r",
							"    pm.expect(jsonData.is_bought).to.eql(true);\r",
							"    pm.expect(jsonData.price).to.eql(30);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v2\", \r\n    \"reward_desc\": \"Now replaced\",\r\n    \"is_bought\": \"true\", \r\n    \"price\": \"30\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c9e31a6-3f32-4ae8-acdf-13f87078ea87",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is CREATED\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Reward is updated\", function () {\r",
							"    pm.expect(jsonData.reward_name).to.eql('2nd v3');\r",
							"    pm.expect(jsonData.reward_desc).to.eql('Now replaced');\r",
							"    pm.expect(jsonData.is_bought).to.eql(false);\r",
							"    pm.expect(jsonData.price).to.eql(10);\r",
							"    pm.expect(jsonData.parent).to.eql(environment.parent_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b57469ce-ae20-400a-8658-3cd28b1a37c6",
						"exec": [
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0870c78-37fa-4079-8a63-c1a0b395990e",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c6a8d63-bd73-4369-b504-3ef13fac86c7",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9305a898-2b75-4a1d-bfac-bfbead10a6b1",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v2\", \r\n    \"reward_desc\": \"Now replaced\",\r\n    \"is_bought\": \"true\", \r\n    \"price\": \"30\", \r\n    \"parent\": \"{{parent_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existing reward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f20ff6fc-a3ea-466e-b57d-85265fa6acb7",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns no reward\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Reward not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reward_name\": \"2nd v3\", \r\n    \"is_bought\": \"false\", \r\n    \"price\": \"10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/rewards/{{reward_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"rewards",
						"{{reward_id}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}